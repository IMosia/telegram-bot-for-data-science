version: "3.9"

# Volumes - allowe to share data between containers and store it after container deletion
volumes:
  postgres_data: {} # Data in Postgres is stored all the time
  logs_volume_airflow: {} # To keep logs of Airflow
  logs_volume_bot: {} # To keep logs of bot
  dags: {} # To keep dags of Airflow

# List of containers

# Telegram bot container
services:
  bot:
    environment: # Environment variables for bot container
      BOT_TOKEN: ${BOT_TOKEN}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      DB_INTERNAL_PORT: ${DB_INTERNAL_PORT}
    build: # Instruction where to find Dockerfile
      context: ./bot
    volumes:
      - logs_volume_bot:/app/logs # To store logs over different container runs

# Liquibase container
  liquibase:
    # Starts only after Postgres container is healthy and ready
    depends_on:
      postgres:
        condition: service_healthy
    build: ./liquibase
    # Command to run liquibase migration
    command: >
      --changeLogFile=initial.postgres.yaml
      --url=jdbc:postgresql://${DB_HOST}:${DB_INTERNAL_PORT}/${POSTGRES_DB}
      --username=${POSTGRES_USER}
      --password=${POSTGRES_PASSWORD}
      update
    environment:
      DB_HOST: ${DB_HOST}
      DB_INTERNAL_PORT: ${DB_INTERNAL_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

# Postgres container
  postgres:
    image: postgres:16.3
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    # Expose Postgres port to the host machine
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
    volumes:
      - postgres_data:/var/lib/postgresql/data

# Airflow container
  airflow:
    build:
      context: ./opt/airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_EXTERNAL_PORT}/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      DB_HOST: ${DB_HOST}
      DB_EXTERNAL_PORT: ${DB_EXTERNAL_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./opt/airflow/dags:/opt/airflow/dags
      - logs_volume_airflow:/opt/airflow/logs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
      airflow db init &&
      /opt/airflow/scripts/create_user.sh &&
      airflow webserver --port 8080 & airflow scheduler"